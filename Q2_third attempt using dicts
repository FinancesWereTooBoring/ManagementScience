import gurobipy as gb
import pandas as pd


df = pd.read_csv("flights-1.csv",  encoding='utf-8')

# Joining the DataFrame with itself on the departure city
df2 = df.set_index('departureCity').join(df.set_index('departureCity'), lsuffix="first", rsuffix="second").reset_index()

# Filtering out rows where the arrival cities match
df2 = df2[df2.arrivalCityfirst != df2.arrivalCitysecond]

# Calculating the total distance as the sum of the distances from departure to hub and hub to arrival
df2["distance"] = df2.Distancefirst + df2.Distancesecond

# Selecting relevant columns
df2 = df2[["departureCity", "arrivalCityfirst", "arrivalCitysecond", "distance"]]

# Renaming columns
df2.columns = ["Hub", "arrivalCity", "departureCity", "Distance"]

merged_df = df2.merge(df[["departureCity", "arrivalCity", "Distance", "Demand"]],
               on=["departureCity", "arrivalCity"],
               how="left")
merged_df.columns = ["Hub", "arrivalCity", "departureCity", "IndirectDistance","DirectDistance", "Demand"]
merged_df["1.3times_Direct"] = 1.3 * merged_df["DirectDistance"]
merged_df = merged_df[["Hub", "arrivalCity", "departureCity", "IndirectDistance", "DirectDistance", "1.3times_Direct", "Demand"]]
merged_df.loc[merged_df["IndirectDistance"] >= merged_df["DirectDistance"] * 1.3, "Hub"] = ""
merged_df["RouteDistance"] = merged_df["DirectDistance"]
mask = merged_df["Hub"] != ""
merged_df.loc[mask, "RouteDistance"] = merged_df.loc[mask, "IndirectDistance"]
merged_df["IndirectUsed"] = (merged_df["Hub"] != "").astype(int) # Presence of a hub

indirect_df = merged_df[merged_df["Hub"] != ""] #Only routes with hubs

flights=[]
for index,row in merged_df.iterrows():
    if row.Hub=="":
        flights.append((row.departureCity,row.arrivalCity))
    else:
        flights.append((row.departureCity,row.Hub))
        flights.append((row.Hub,row.departureCity))
flights=list(set(flights))#removing duplicates

ItineraryFlights = {}
for index, row in merged_df.iterrows():
    itflights = []
    if row.Hub == "":
        itflights.append((row.departureCity, row.arrivalCity))
        ItineraryFlights[row.departureCity, row.arrivalCity, "Direct"] = itflights
    else:
        itflights.append((row.departureCity, row.Hub))
        itflights.append((row.Hub, row.arrivalCity))
        ItineraryFlights[row.departureCity, row.arrivalCity, "Indirect"] = itflights

ChargeDirect = 0.1
ChargeIndirect = 0.08
Planes = ['small', 'medium', 'large'] 
Capacity = {"small": 50, "medium": 100, "large": 300}
CostPerMile = {"small": 4.5, "medium": 8, "large": 20}
M = 1000000000


# creating two differnt dicts for indirect and direct flights because gurobi does not allow differnt length of tuples in one dict

IndirectDistances = {}
DirectDistances = {}  

# distance is different for all indirect flights

for index, row in merged_df.iterrows():
    DirectDistances[row.departureCity, row.arrivalCity] = row.DirectDistance
    if row.Hub != "":
        IndirectDistances[row.departureCity, row.Hub, row.arrivalCity] = row.IndirectDistance


#first one is empty so remove it

HubCities = list(set(merged_df.Hub.unique()))
HubCities = HubCities[1:]

# revenue per customer is the same for all flights

DirectRevenuePerCustomer  = {}
IndirectRevenuePerCustomer = {}
for index, row in merged_df.iterrows():
    DirectRevenuePerCustomer[row.departureCity, row.arrivalCity] = row.DirectDistance * ChargeDirect
    if row.Hub != "":
        IndirectRevenuePerCustomer[row.departureCity, row.Hub, row.arrivalCity] = row.DirectDistance * ChargeIndirect

# all revenue per customer values for indirect flights are the same, which should be the case, only the costs differ per mile

DirectDemand = {}
IndirectDemand = {}
for index, row in merged_df.iterrows():
    DirectDemand[row.departureCity, row.arrivalCity] = row.Demand
    if row.Hub != "":
        IndirectDemand[row.departureCity, row.Hub, row.arrivalCity] = row.Demand

model3 = gb.Model()

DirectNumPassengers = model3.addVars(DirectRevenuePerCustomer, name="DirectNumPassengers", vtype=gb.GRB.INTEGER, lb=0)
IndirectNumPassengers = model3.addVars(IndirectRevenuePerCustomer, name="IndirectNumPassengers", vtype=gb.GRB.INTEGER, lb=0)

DirectPlanes = model3.addVars(CostPerMile, name="PlaneSize", vtype=gb.GRB.INTEGER, lb=0)
IndirectPlanes = model3.addVars(CostPerMile, name="PlaneSize", vtype=gb.GRB.INTEGER, lb=0)

Hubs = model3.addVars(HubCities, name="Hubs", vtype=gb.GRB.BINARY, lb=0)

model3.setObjective((gb.quicksum(DirectRevenuePerCustomer[route] * DirectNumPassengers[route] for route in DirectDistances)
                    + gb.quicksum(IndirectRevenuePerCustomer[route2] * IndirectNumPassengers[route2] for route2 in IndirectDistances)
                    - gb.quicksum(DirectPlanes[plane] * CostPerMile[plane] * DirectDistances[route] for plane in Planes for route in DirectDistances)
                    - gb.quicksum(IndirectPlanes[plane] * CostPerMile[plane] * IndirectDistances[route2] for plane in Planes for route2 in IndirectDistances))
                    , gb.GRB.MAXIMIZE)

model3.addConstrs(DirectNumPassengers.sum(i, j) + IndirectNumPassengers.sum(i, '*', j) == DirectDemand[i, j] for (i, j) in DirectDemand)

#model3.addConstr(DirectNumPassengers.sum() + IndirectNumPassengers.sum() <= gb.quicksum(Capacity[plane] * (DirectPlanes[plane] + IndirectPlanes[plane]) for plane in Planes), name="TotalCapacityConstraint")

model3.addConstr(Hubs.sum() == 2)

model3.addConstrs((IndirectNumPassengers.sum('*', k, '*') <= Hubs[k] * M for k in Hubs))

model3.optimize()      
